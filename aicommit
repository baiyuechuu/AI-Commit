#!/bin/bash

# Push flag
PUSH=false

# OpenRouter configuration
OPENROUTER_URL="https://openrouter.ai/api/v1"
OPENROUTER_MODEL="google/gemini-flash-1.5-8b"

# Function to get API key from environment variable
get_api_key() {
  echo "${OPENROUTER_API_KEY:-}"
}

# Function to get model from environment variable
get_model() {
  echo "${GIT_COMMIT_AI_MODEL:-}"
}

# Function to get base URL from environment variable
get_base_url() {
  echo "${GIT_COMMIT_AI_BASE_URL:-$OPENROUTER_URL}"
}

# Replace all linebreaks with proper JSON escaping
function replace_linebreaks() {
  local input="$1"
  printf '%s' "$input" | tr '\n' '\\n' | sed 's/\n$//'
}

# Load base URL from environment variables or use defaults
BASE_URL=$(get_base_url)

# Get model from environment or use default
MODEL=$(get_model)
if [ -z "$MODEL" ]; then
  MODEL="$OPENROUTER_MODEL"
fi

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  --push | -p)
    PUSH=true
    shift
    ;;
  -h | --help)
    echo "Usage: aicommit [options]"
    echo ""
    echo "Options:"
    echo "  --push, -p            Push changes after commit"
    echo "  --model <model>       Use specific model (default: google/gemini-flash-1.5-8b)"
    echo "  --base-url <url>      Use custom base URL"
    echo "  --api-key <key>       Set API key"
    echo "  -h, --help            Show this help message"
    echo ""
    echo "Environment Variables:"
    echo "  OPENROUTER_API_KEY       API key for OpenRouter"
    echo "  GIT_COMMIT_AI_BASE_URL   Base URL for the API (default: https://openrouter.ai/api/v1)"
    echo "  GIT_COMMIT_AI_MODEL      Model to use"
    echo ""
    echo "Examples:"
    echo "  export OPENROUTER_API_KEY=your_api_key"
    echo "  aicommit"
    echo "  aicommit --model google/gemini-flash-1.5-8b"
    exit 0
    ;;
  --model)
    # Check if next argument exists and doesn't start with -
    if [[ -n "$2" && "$2" != -* ]]; then
      # Remove any quotes from model name
      MODEL=$(echo "$2" | tr -d '"')
      export GIT_COMMIT_AI_MODEL="$MODEL"
      shift 2
    else
      echo "Error: --model requires a valid model name"
      exit 1
    fi
    ;;
  --base-url)
    # Check if next argument exists and doesn't start with -
    if [[ -n "$2" && "$2" != -* ]]; then
      BASE_URL="$2"
      export GIT_COMMIT_AI_BASE_URL="$BASE_URL"
      shift 2
    else
      echo "Error: --base-url requires a valid URL"
      exit 1
    fi
    ;;
  --api-key)
    # Check if next argument exists and doesn't start with -
    if [[ -n "$2" && "$2" != -* ]]; then
      export OPENROUTER_API_KEY="$2"
      shift 2
    else
      echo "Error: --api-key requires a valid API key"
      exit 1
    fi
    ;;
  *)
    echo "Error: Unknown argument $1"
    exit 1
    ;;
  esac
done

# Get API key from environment variable
API_KEY=$(get_api_key)

if [ -z "$API_KEY" ]; then
  echo "No API key found. Please set the OPENROUTER_API_KEY environment variable or use --api-key flag"
  echo "Usage: aicommit [--push|-p] [--model <model_name>] [--base-url <url>] [--api-key <key>]"
  exit 1
fi

# Stage all changes
git add .

# Get git changes and clean up any tabs
CHANGES=$(git diff --cached --name-status | tr '\t' ' ' | sed 's/  */ /g')
# Get git diff for context
DIFF_CONTENT=$(git diff --cached)

if [ -z "$CHANGES" ]; then
  echo "No staged changes found. Please stage your changes using 'git add' first."
  exit 1
fi

# Remove all linebreaks from CHANGES
CHANGES=$(replace_linebreaks "$CHANGES")

# Format changes into a single line and replace \M with newlines
FORMATTED_CHANGES=$(echo "$CHANGES" | sed 's/\\M/\n/g' | tr '\n' ' ' | sed 's/  */ /g')

# Extract only the file names and modification types and replace \M with newlines
SIMPLIFIED_DIFF=$(echo "$CHANGES" | sed 's/\\M/\n/g' | sed 's/^\([A-Z]\) \(.*\)$/\1: \2/' | tr '\n' ' ')

# Format diff for OpenRouter
# Replace newlines with \n, and both \M and \nM with \n, then escape double quotes
FORMATTED_DIFF=$(echo "$DIFF_CONTENT" | tr '\n' '\\n' | sed 's/\\M/\\n/g' | sed 's/\\nM/\\n/g' | sed 's/"/\\"/g')

# Make the API request
ENDPOINT="chat/completions"
  HEADERS=(
    "HTTP-Referer: https://github.com/mrgoonie/aicommit"
    "Authorization: Bearer $API_KEY"
    "Content-Type: application/json"
    "X-Title: aicommit - AI Commit Message Generator"
  )
REQUEST_BODY=$(
  cat <<EOF
{
  "model": "$MODEL",
  "stream": false,
  "messages": [
    {
      "role": "system",
      "content": "You are a git commit message generator. Create conventional commit messages."
    },
    {
      "role": "user",
      "content": "Generate a commit message for these changes:\n\n## File changes:\n<file_changes>\n$FORMATTED_CHANGES\n</file_changes>\n\n## Diff:\n<diff>\n$FORMATTED_DIFF\n</diff>\n\n## Format:\n<type>(<scope>): <subject>\n\n<body>\n\nImportant:\n- Type must be one of: feat, fix, docs, style, refactor, perf, test, chore\n- Subject: max 70 characters, imperative mood, no period\n- Body: list changes to explain what and why, not how\n- Scope: max 3 words\n- For minor changes: use 'fix' instead of 'feat'\n- Do not wrap your response in triple backticks\n- Response should be the commit message only, no explanations."
    }
  ]
}
EOF
)

# Convert headers array to proper curl format
CURL_HEADERS=()
for header in "${HEADERS[@]}"; do
  CURL_HEADERS+=(-H "$header")
done

RESPONSE=$(curl -s -X POST "$BASE_URL/$ENDPOINT" \
  "${CURL_HEADERS[@]}" \
  -d "$REQUEST_BODY")

# Extract and clean the commit message
COMMIT_FULL=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

# If jq fails or returns null, fallback to grep method
if [ -z "$COMMIT_FULL" ] || [ "$COMMIT_FULL" = "null" ]; then
  COMMIT_FULL=$(echo "$RESPONSE" | grep -o '"content":"[^"]*"' | cut -d'"' -f4)
fi

# Clean the message:
# 1. Preserve the structure of the commit message
# 2. Clean up escape sequences
COMMIT_FULL=$(echo "$COMMIT_FULL" |
  sed 's/\\n/\n/g' |
  sed 's/\\r//g' |
  sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' |
  sed 's/\\[[:alpha:]]//g')

if [ -z "$COMMIT_FULL" ]; then
  echo "Failed to generate commit message. API response:"
  echo "$RESPONSE"
  exit 1
fi

# Execute git commit
git commit -m "$COMMIT_FULL"

if [ $? -ne 0 ]; then
  echo "Failed to commit changes"
  exit 1
fi

# Push to origin if flag is set
if [ "$PUSH" = true ]; then
  git push origin

  if [ $? -ne 0 ]; then
    echo "Failed to push changes"
    exit 1
  fi
  echo "Successfully pushed changes to origin"
fi

echo "Successfully committed and pushed changes with message:"
echo "$COMMIT_FULL"
