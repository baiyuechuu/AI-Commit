#!/bin/bash

# Colors for beautiful output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
GRAY='\033[0;90m'
BOLD='\033[1m'
UNDERLINE='\033[4m'
NC='\033[0m' # No Color

# Emoji for visual appeal
ROCKET="🚀"
SPARKLES="✨"
CHECK="✅"
WARNING="⚠️"
ERROR="❌"
INFO="ℹ️"
GEAR="⚙️"
BRAIN="🧠"
GIT="📝"

# Push flag
PUSH=false

# OpenRouter configuration
OPENROUTER_URL="https://openrouter.ai/api/v1"
OPENROUTER_MODEL="google/gemini-flash-1.5-8b"

# Function to print colored output
print_status() {
  local color=$1
  local emoji=$2
  local message=$3
  echo -e "${color}${emoji} ${message}${NC}"
}

print_header() {
  echo -e "${BOLD}${CYAN}${SPARKLES} AI Commit - Smart Git Commit Messages ${SPARKLES}${NC}"
  echo -e "${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

print_footer() {
  echo -e "${GRAY}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
}

# Function to show progress spinner
show_spinner() {
  local pid=$1
  local delay=0.1
  local spinstr='|/-\'
  while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
    local temp=${spinstr#?}
    printf " [%c]  " "$spinstr"
    local spinstr=$temp${spinstr%"$temp"}
    sleep $delay
    printf "\b\b\b\b\b\b"
  done
  printf "    \b\b\b\b"
}

# Function to get API key from environment variable
get_api_key() {
  echo "${OPENROUTER_API_KEY:-}"
}

# Function to get model from environment variable
get_model() {
  echo "${GIT_COMMIT_AI_MODEL:-}"
}

# Function to get base URL from environment variable
get_base_url() {
  echo "${GIT_COMMIT_AI_BASE_URL:-$OPENROUTER_URL}"
}

# Replace all linebreaks with proper JSON escaping
function replace_linebreaks() {
  local input="$1"
  printf '%s' "$input" | tr '\n' '\\n' | sed 's/\n$//'
}

# Load base URL from environment variables or use defaults
BASE_URL=$(get_base_url)

# Get model from environment or use default
MODEL=$(get_model)
if [ -z "$MODEL" ]; then
  MODEL="$OPENROUTER_MODEL"
fi

# Parse command line arguments
while [[ $# -gt 0 ]]; do
  case $1 in
  --push | -p)
    PUSH=true
    shift
    ;;
  -h | --help)
    print_header
    echo -e "${WHITE}Usage:${NC} aicommit [options]"
    echo ""
    echo -e "${BOLD}${YELLOW}Options:${NC}"
    echo -e "  ${GREEN}--push, -p${NC}            ${WHITE}Push changes after commit${NC}"
    echo -e "  ${GREEN}--model <model>${NC}       ${WHITE}Use specific model (default: google/gemini-flash-1.5-8b)${NC}"
    echo -e "  ${GREEN}--base-url <url>${NC}      ${WHITE}Use custom base URL${NC}"
    echo -e "  ${GREEN}--api-key <key>${NC}       ${WHITE}Set API key${NC}"
    echo -e "  ${GREEN}-h, --help${NC}            ${WHITE}Show this help message${NC}"
    echo ""
    echo -e "${BOLD}${YELLOW}Environment Variables:${NC}"
    echo -e "  ${CYAN}OPENROUTER_API_KEY${NC}       ${WHITE}API key for OpenRouter${NC}"
    echo -e "  ${CYAN}GIT_COMMIT_AI_BASE_URL${NC}   ${WHITE}Base URL for the API (default: https://openrouter.ai/api/v1)${NC}"
    echo -e "  ${CYAN}GIT_COMMIT_AI_MODEL${NC}      ${WHITE}Model to use${NC}"
    echo ""
    echo -e "${BOLD}${YELLOW}Examples:${NC}"
    echo -e "  ${GRAY}export OPENROUTER_API_KEY=your_api_key${NC}"
    echo -e "  ${GRAY}aicommit${NC}"
    echo -e "  ${GRAY}aicommit --model google/gemini-flash-1.5-8b${NC}"
    print_footer
    exit 0
    ;;
  --model)
    # Check if next argument exists and doesn't start with -
    if [[ -n "$2" && "$2" != -* ]]; then
      # Remove any quotes from model name
      MODEL=$(echo "$2" | tr -d '"')
      export GIT_COMMIT_AI_MODEL="$MODEL"
      shift 2
    else
      print_status "$RED" "$ERROR" "Error: --model requires a valid model name"
      exit 1
    fi
    ;;
  --base-url)
    # Check if next argument exists and doesn't start with -
    if [[ -n "$2" && "$2" != -* ]]; then
      BASE_URL="$2"
      export GIT_COMMIT_AI_BASE_URL="$BASE_URL"
      shift 2
    else
      print_status "$RED" "$ERROR" "Error: --base-url requires a valid URL"
      exit 1
    fi
    ;;
  --api-key)
    # Check if next argument exists and doesn't start with -
    if [[ -n "$2" && "$2" != -* ]]; then
      export OPENROUTER_API_KEY="$2"
      shift 2
    else
      print_status "$RED" "$ERROR" "Error: --api-key requires a valid API key"
      exit 1
    fi
    ;;
  *)
    print_status "$RED" "$ERROR" "Error: Unknown argument $1"
    exit 1
    ;;
  esac
done

# Print header
print_header

# Get API key from environment variable
API_KEY=$(get_api_key)

if [ -z "$API_KEY" ]; then
  print_status "$RED" "$ERROR" "No API key found. Please set the OPENROUTER_API_KEY environment variable or use --api-key flag"
  echo -e "${WHITE}Usage:${NC} aicommit [--push|-p] [--model <model_name>] [--base-url <url>] [--api-key <key>]"
  exit 1
fi

# Check if we're in a git repository
if ! git rev-parse --git-dir > /dev/null 2>&1; then
  print_status "$RED" "$ERROR" "Not in a git repository. Please run this command from a git repository."
  exit 1
fi

print_status "$BLUE" "$INFO" "Checking for staged changes..."

# Stage all changes
git add .

# Get git changes and clean up any tabs
CHANGES=$(git diff --cached --name-status | tr '\t' ' ' | sed 's/  */ /g')
# Get git diff for context
DIFF_CONTENT=$(git diff --cached)

if [ -z "$CHANGES" ]; then
  print_status "$YELLOW" "$WARNING" "No staged changes found. Please stage your changes using 'git add' first."
  exit 1
fi

# Count the number of files changed
FILE_COUNT=$(echo "$CHANGES" | wc -l)
print_status "$GREEN" "$CHECK" "Found $FILE_COUNT file(s) with changes"

# Remove all linebreaks from CHANGES
CHANGES=$(replace_linebreaks "$CHANGES")

# Format changes into a single line and replace \M with newlines
FORMATTED_CHANGES=$(echo "$CHANGES" | sed 's/\\M/\n/g' | tr '\n' ' ' | sed 's/  */ /g')

# Extract only the file names and modification types and replace \M with newlines
SIMPLIFIED_DIFF=$(echo "$CHANGES" | sed 's/\\M/\n/g' | sed 's/^\([A-Z]\) \(.*\)$/\1: \2/' | tr '\n' ' ')

# Format diff for OpenRouter
# Replace newlines with \n, and both \M and \nM with \n, then escape double quotes
FORMATTED_DIFF=$(echo "$DIFF_CONTENT" | tr '\n' '\\n' | sed 's/\\M/\\n/g' | sed 's/\\nM/\\n/g' | sed 's/"/\\"/g')

print_status "$BLUE" "$BRAIN" "Generating commit message with AI model: ${CYAN}$MODEL${NC}"

# Make the API request
ENDPOINT="chat/completions"
HEADERS=(
  "HTTP-Referer: https://github.com/mrgoonie/aicommit"
  "Authorization: Bearer $API_KEY"
  "Content-Type: application/json"
  "X-Title: aicommit - AI Commit Message Generator"
)
REQUEST_BODY=$(
  cat <<EOF
{
  "model": "$MODEL",
  "stream": false,
  "messages": [
    {
      "role": "system",
      "content": "You are a git commit message generator. Create conventional commit messages."
    },
    {
      "role": "user",
      "content": "Generate a commit message for these changes:\n\n## File changes:\n<file_changes>\n$FORMATTED_CHANGES\n</file_changes>\n\n## Diff:\n<diff>\n$FORMATTED_DIFF\n</diff>\n\n## Format:\n<type>(<scope>): <subject>\n\n<body>\n\nImportant:\n- Type must be one of: feat, fix, docs, style, refactor, perf, test, chore\n- Subject: max 70 characters, imperative mood, no period\n- Body: list changes to explain what and why, not how\n- Scope: max 3 words\n- For minor changes: use 'fix' instead of 'feat'\n- Do not wrap your response in triple backticks\n- Response should be the commit message only, no explanations."
    }
  ]
}
EOF
)

# Convert headers array to proper curl format
CURL_HEADERS=()
for header in "${HEADERS[@]}"; do
  CURL_HEADERS+=(-H "$header")
done

# Show spinner while making API request
print_status "$BLUE" "$GEAR" "Connecting to AI service..."
RESPONSE=$(curl -s -X POST "$BASE_URL/$ENDPOINT" \
  "${CURL_HEADERS[@]}" \
  -d "$REQUEST_BODY")

# Extract and clean the commit message
COMMIT_FULL=$(echo "$RESPONSE" | jq -r '.choices[0].message.content')

# If jq fails or returns null, fallback to grep method
if [ -z "$COMMIT_FULL" ] || [ "$COMMIT_FULL" = "null" ]; then
  COMMIT_FULL=$(echo "$RESPONSE" | grep -o '"content":"[^"]*"' | cut -d'"' -f4)
fi

# Clean the message:
# 1. Preserve the structure of the commit message
# 2. Clean up escape sequences
COMMIT_FULL=$(echo "$COMMIT_FULL" |
  sed 's/\\n/\n/g' |
  sed 's/\\r//g' |
  sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//' |
  sed 's/\\[[:alpha:]]//g')

if [ -z "$COMMIT_FULL" ]; then
  print_status "$RED" "$ERROR" "Failed to generate commit message. API response:"
  echo "$RESPONSE"
  exit 1
fi

print_status "$GREEN" "$CHECK" "AI generated commit message successfully"

# Show the commit message in a nice format
echo -e "${BOLD}${CYAN}Generated Commit Message:${NC}"
echo -e "${GRAY}┌─────────────────────────────────────────────────────────────────────────────────┐${NC}"
echo -e "${GRAY}│${NC} ${WHITE}$COMMIT_FULL${NC}"
echo -e "${GRAY}└─────────────────────────────────────────────────────────────────────────────────┘${NC}"

print_status "$BLUE" "$GIT" "Committing changes..."

# Execute git commit
git commit -m "$COMMIT_FULL"

if [ $? -ne 0 ]; then
  print_status "$RED" "$ERROR" "Failed to commit changes"
  exit 1
fi

print_status "$GREEN" "$CHECK" "Changes committed successfully"

# Push to origin if flag is set
if [ "$PUSH" = true ]; then
  print_status "$BLUE" "$ROCKET" "Pushing changes to remote repository..."
  git push origin

  if [ $? -ne 0 ]; then
    print_status "$RED" "$ERROR" "Failed to push changes"
    exit 1
  fi
  print_status "$GREEN" "$CHECK" "Successfully pushed changes to origin"
fi

print_footer
print_status "$GREEN" "$SPARKLES" "All done! Your commit has been created with AI assistance."
